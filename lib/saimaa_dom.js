// Generated by CoffeeScript 1.12.7
(function() {
  var SaimaaDOM, SaimaaUtil;

  SaimaaUtil = require("./saimaa_util");

  SaimaaDOM = (function() {
    function SaimaaDOM(editor) {
      this.editor = editor;
    }

    SaimaaDOM.prototype.h = function(tag, child) {
      var node;
      if (child == null) {
        child = null;
      }
      node = document.createElement(tag);
      if (child) {
        node.appendChild(child);
      }
      return node;
    };

    SaimaaDOM.prototype.html = function() {
      return this.editor.innerHTML;
    };

    SaimaaDOM.prototype.caretNode = function() {
      var node, result;
      node = window.getSelection().anchorNode;
      if ((node != null) && node.nodeType === Node.TEXT_NODE || ((node.tagName != null) && node.tagName === "BR")) {
        result = node.parentNode;
      } else {
        result = node;
      }
      return result;
    };

    SaimaaDOM.prototype.append = function(node) {
      this.editor.insertBefore(node, this.caretNode().nextSibling);
      return this.moveCaret(node);
    };

    SaimaaDOM.prototype.appendP = function() {
      var br, p;
      p = this.h("p");
      br = this.h("br");
      p.appendChild(br);
      return this.append(p);
    };

    SaimaaDOM.prototype.appendLi = function() {
      var li;
      li = document.createElement("li");
      li.appendChild(document.createElement("br"));
      return this.append(li);
    };

    SaimaaDOM.prototype.changeTag = function(tag) {
      var childNode, i, len, newNode, oldCaretNode, ref;
      newNode = this.h(tag);
      oldCaretNode = this.caretNode();
      ref = oldCaretNode.childNodes;
      for (i = 0, len = ref.length; i < len; i++) {
        childNode = ref[i];
        newNode.appendChild(childNode);
      }
      this.append(newNode);
      this.moveCaret(newNode);
      return this.editor.removeChild(oldCaretNode);
    };

    SaimaaDOM.prototype.changeList = function(tag) {
      var br, li, list, oldCaretNode;
      oldCaretNode = this.caretNode();
      list = this.h(tag);
      li = this.h("li");
      br = this.h("br");
      li.appendChild(br);
      list.appendChild(li);
      this.append(list);
      this.moveCaret(br);
      return this.editor.removeChild(oldCaretNode);
    };

    SaimaaDOM.prototype.changeUl = function() {
      return this.changeList("ul");
    };

    SaimaaDOM.prototype.changeOl = function() {
      return this.changeList("ol");
    };

    SaimaaDOM.prototype.changeH2 = function() {
      return this.changeTag("h2");
    };

    SaimaaDOM.prototype.changeH3 = function() {
      return this.changeTag("h3");
    };

    SaimaaDOM.prototype.changeH4 = function() {
      return this.changeTag("h4");
    };

    SaimaaDOM.prototype.changeBlockquote = function() {
      var bq, childNodes, i, lastNode, len, node;
      childNodes = this.caretNode().childNodes;
      lastNode = childNodes;
      bq = this.h("blockquote");
      for (i = 0, len = childNodes.length; i < len; i++) {
        node = childNodes[i];
        bq.appendChild(node);
      }
      return this.append(bq);
    };

    SaimaaDOM.prototype.formatBlock = function(tag) {
      console.log(SaimaaUtil);
      if (SaimaaUtil.ie()) {
        return document.execCommand("formatBlock", false, "<" + tag + ">");
      } else {
        return document.execCommand("formatBlock", false, tag);
      }
    };

    SaimaaDOM.prototype.moveCaret = function(node) {
      var range, selection;
      range = document.createRange();
      selection = window.getSelection();
      range.setStart(node, 0);
      range.collapse(true);
      selection.removeAllRanges();
      return selection.addRange(range);
    };

    return SaimaaDOM;

  })();

  module.exports = SaimaaDOM;

}).call(this);
