// Generated by CoffeeScript 1.12.7
(function() {
  var SaimaaDOM, SaimaaUtil, h;

  h = require("h");

  SaimaaUtil = require("./saimaa_util");

  SaimaaDOM = (function() {
    function SaimaaDOM(editor) {
      this.editor = editor;
      this.lastNode = null;
    }

    SaimaaDOM.prototype.html = function() {
      return this.editor.innerHTML;
    };

    SaimaaDOM.prototype.caretNode = function() {
      var a;
      a = window.getSelection().anchorNode;
      if (a.nodeType === Node.TEXT_NODE) {
        return a.parentNode;
      } else {
        return a;
      }
    };

    SaimaaDOM.prototype.add = function(node) {
      var range, selection;
      selection = window.getSelection();
      if (selection.rangeCount > 0) {
        range = selection.getRangeAt(0);
        range.insertNode(node);
        range.setStartAfter(node);
        return range.collapse(true);
      }
    };

    SaimaaDOM.prototype.addBr = function() {
      var br, br2, range, selection;
      selection = window.getSelection();
      if (selection.rangeCount > 0) {
        range = selection.getRangeAt(0);
        br = h("br");
        br2 = h("br");
        range.insertNode(br);
        range.insertNode(br2);
        range.setStartAfter(br);
        return range.collapse(true);
      }
    };

    SaimaaDOM.prototype.append = function(node, caretNode) {
      var i, n, oldCaretNode;
      if (caretNode == null) {
        caretNode = null;
      }
      oldCaretNode = this.caretNode();
      for (n = i = 1; i <= 2; n = ++i) {
        if (this.caretLeftIsBr()) {
          this.removeCaretLeft();
        }
      }
      if (this.editor === oldCaretNode) {
        this.editor.appendChild(node);
      } else {
        oldCaretNode.parentNode.insertBefore(node, oldCaretNode.nextSibling);
      }
      if (caretNode) {
        return this.moveCaret(caretNode);
      }
    };

    SaimaaDOM.prototype.appendP = function() {
      var node, rightNodes, target;
      if (this.caretRightAll()) {
        rightNodes = this.removeCaretRightAll();
      }
      if (rightNodes) {
        node = rightNodes;
        target = rightNodes[0];
      } else {
        target = h("br");
        node = h("p", target);
      }
      return this.append(node, target);
    };

    SaimaaDOM.prototype.appendLi = function() {
      var br, li;
      br = h("br");
      li = h("li", br);
      return this.append(li, br);
    };

    SaimaaDOM.prototype.changeTag = function(tag) {
      var childNode, i, len, newNode, oldCaretNode, ref;
      newNode = h(tag);
      oldCaretNode = this.caretNode();
      ref = oldCaretNode.childNodes;
      for (i = 0, len = ref.length; i < len; i++) {
        childNode = ref[i];
        newNode.appendChild(childNode);
      }
      this.append(newNode);
      this.moveCaret(newNode);
      return this.editor.removeChild(oldCaretNode);
    };

    SaimaaDOM.prototype.changeList = function(tag) {
      var br, li, ul;
      this.editor.focus();
      if (this.lastNode) {
        this.moveCaret(this.lastNode);
      }
      ul = h(tag);
      li = h("li");
      br = h("br");
      li.appendChild(br);
      ul.appendChild(li);
      this.append(ul, br);
      if (this.editor !== this.lastNode) {
        return this.editor.removeChild(this.lastNode);
      }
    };

    SaimaaDOM.prototype.changeUl = function() {
      return this.changeList("ul");
    };

    SaimaaDOM.prototype.changeOl = function() {
      return this.changeList("ol");
    };

    SaimaaDOM.prototype.changeH2 = function() {
      return this.formatBlock("h2");
    };

    SaimaaDOM.prototype.changeH3 = function() {
      return this.formatBlock("h3");
    };

    SaimaaDOM.prototype.changeH4 = function() {
      return this.formatBlock("h4");
    };

    SaimaaDOM.prototype.changeBlockquote = function() {
      var bq, br;
      this.editor.focus();
      if (this.lastNode) {
        this.moveCaret(this.lastNode);
      }
      br = h("br");
      bq = h("blockquote", br);
      this.append(bq, br);
      if (this.editor !== this.lastNode) {
        return this.editor.removeChild(this.lastNode);
      }
    };

    SaimaaDOM.prototype.changeTitle = function() {
      return this.editor.childNodes[0].classList.add("title");
    };

    SaimaaDOM.prototype.formatBlock = function(tag) {
      var t;
      if (this.lastNode) {
        this.moveCaret(this.lastNode);
      }
      if (SaimaaUtil.ie()) {
        t = "<" + tag + ">";
      } else {
        t = tag;
      }
      document.execCommand("formatBlock", false, t);
      return this.saveLastNode();
    };

    SaimaaDOM.prototype.tailBr = function() {
      var childNodes, lastNode, range, startContainer;
      this.caretNode().normalize();
      range = window.getSelection().getRangeAt(0);
      startContainer = range.startContainer;
      if (startContainer.nodeType === Node.ELEMENT_NODE && startContainer.childNodes.length > 0) {
        childNodes = startContainer.childNodes;
        lastNode = childNodes[range.startOffset - 1];
        if (this.isTag(lastNode, "br")) {
          return true;
        }
      }
      return false;
    };

    SaimaaDOM.prototype.inLi = function() {
      return this.caretNode().tagName.toLowerCase() === "li";
    };

    SaimaaDOM.prototype.inBlankLi = function() {
      var c;
      c = this.caretNode();
      return c.tagName.toLowerCase() === "li" && c.childNodes.length === 1 && this.isTag(c.firstChild, "br");
    };

    SaimaaDOM.prototype.inP = function() {
      return this.caretNode().tagName.toLowerCase() === "p";
    };

    SaimaaDOM.prototype.inTitle = function() {
      var i, len, name, ref;
      this.caretNode().className.toLowerCase() === "title";
      ref = this.caretNode().classList;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        if (name === "title") {
          return true;
        }
      }
      return false;
    };

    SaimaaDOM.prototype.breakLi = function() {
      var br, oldCaretNode, p, ul;
      br = h("br");
      p = h("p");
      p.appendChild(br);
      oldCaretNode = this.caretNode();
      ul = oldCaretNode.parentNode;
      ul.parentNode.insertBefore(p, oldCaretNode.nextSibling);
      this.moveCaret(br);
      return ul.removeChild(oldCaretNode);
    };

    SaimaaDOM.prototype.moveCaret = function(node) {
      return window.getSelection().getRangeAt(0).setStartAfter(node);
    };

    SaimaaDOM.prototype.saveLastNode = function() {
      if (this.editor !== this.caretNode() && this.editor.contains(this.caretNode())) {
        return this.lastNode = this.caretNode();
      }
    };

    SaimaaDOM.prototype.isTag = function(node, tagName) {
      return node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() === tagName;
    };

    SaimaaDOM.prototype.removeCaretLeft = function() {
      return this.caretNode().removeChild(this.caretLeft());
    };

    SaimaaDOM.prototype.caretLeft = function() {
      var childNodes, leftNode, oldCaret, range, startContainer;
      oldCaret = this.caretNode();
      oldCaret.normalize();
      range = window.getSelection().getRangeAt(0);
      startContainer = range.startContainer;
      if (startContainer.nodeType === Node.ELEMENT_NODE && startContainer.childNodes.length > 0) {
        childNodes = startContainer.childNodes;
        leftNode = childNodes[range.startOffset - 1];
        return leftNode;
      }
      return null;
    };

    SaimaaDOM.prototype.caretLeftIsBr = function() {
      var caretLeft;
      caretLeft = this.caretLeft();
      return caretLeft && caretLeft.nodeType === Node.ELEMENT_NODE && caretLeft.tagName.toLowerCase() === "br";
    };

    SaimaaDOM.prototype.caretRightAll = function() {
      var childNodes, length, n, oldCaret, range, rightNodes, startContainer;
      oldCaret = this.caretNode();
      oldCaret.normalize();
      range = window.getSelection().getRangeAt(0);
      startContainer = range.startContainer;
      if (startContainer.nodeType === Node.ELEMENT_NODE && startContainer.childNodes.length > 0) {
        childNodes = startContainer.childNodes;
        rightNodes = [];
        n = range.startOffset + 1;
        length = childNodes.length;
        while (n < length) {
          rightNodes.push(childNodes[n]);
          n++;
        }
        if (rightNodes.length > 0) {
          return rightNodes;
        }
      }
      return null;
    };

    SaimaaDOM.prototype.removeCaretRightAll = function() {
      var childNodes, n, offset, oldCaret, range, rightNodes, startContainer;
      oldCaret = this.caretNode();
      oldCaret.normalize();
      range = window.getSelection().getRangeAt(0);
      startContainer = range.startContainer;
      if (startContainer.nodeType === Node.ELEMENT_NODE && startContainer.childNodes.length > 0) {
        childNodes = startContainer.childNodes;
        rightNodes = [];
        offset = range.startOffset + 1;
        n = childNodes.length - 1;
        while (n >= offset) {
          rightNodes.unshift(startContainer.removeChild(childNodes[n]));
          n--;
        }
        if (rightNodes.length > 0) {
          return rightNodes;
        }
      }
      return null;
    };

    return SaimaaDOM;

  })();

  module.exports = SaimaaDOM;

}).call(this);
